directive @goField(forceResolver: Boolean) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION
directive @binding(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @validate(constraint: String!) on INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION
enum Role {
    ADMIN
    USER
}
type ProductResponse {
    id: ID!
    name: String!
    description: String!
    price: Float!
    image: String
}

input ProductRequest {
    name: String! @binding(constraint: "required,max=5")
    description: String!
    price: Float!
    image: String!
}
extend type Query {
    getProducts: [ProductResponse!] @goField(forceResolver: true)
    getProduct(id: ID!): ProductResponse
}
extend type Mutation {
    createProduct(input: ProductRequest!): ProductResponse @hasRole(role: ADMIN)
    updateProduct(id: ID!, input: ProductRequest!): ProductResponse
    deleteProduct(id: ID!): ProductResponse
}
