package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"leaning-graphql/graph/model"
	"log/slog"
)

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.ProductRequest) (*model.ProductResponse, error) {
	panic(fmt.Errorf("not implemented: CreateProduct - createProduct"))
}

// UpdateProduct is the resolver for the updateProduct field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, input model.ProductRequest) (*model.ProductResponse, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - updateProduct"))
}

// DeleteProduct is the resolver for the deleteProduct field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (*model.ProductResponse, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - deleteProduct"))
}

// GetProducts is the resolver for the getProducts field.
func (r *queryResolver) GetProducts(ctx context.Context) ([]*model.ProductResponse, error) {
	products, err := r.ProductSvc.GetProductsService()
	if err != nil {
		return nil, err
	}
	var productsResp []*model.ProductResponse
	for _, value := range products {
		product := model.ProductResponse{
			ID:    value.ID,
			Name:  value.Name,
			Price: value.Price,
		}
		productsResp = append(productsResp, &product)
	}
	return productsResp, nil
	slog.Log(ctx, slog.LevelInfo, "GetProducts")
	return []*model.ProductResponse{}, nil
	panic(fmt.Errorf("not implemented: GetProducts - getProducts"))
}

// GetProduct is the resolver for the getProduct field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.ProductResponse, error) {
	panic(fmt.Errorf("not implemented: GetProduct - getProduct"))
}
